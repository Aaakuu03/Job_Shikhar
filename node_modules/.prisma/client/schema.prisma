generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String     @id @default(cuid()) // Changed to CUID
  name                     String?
  email                    String     @unique
  phoneNumber              String     @unique
  password                 String
  userType                 Role       @default(JOBSEEKER)
  isVerified               Boolean    @default(false)
  verificationToken        String?
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?
  isFormFilled             Boolean    @default(false)
  token                    Token[]
  employer                 Employer[]
  jobSeeker                JobSeeker?
}

model Token {
  id     String @id @default(cuid())
  token  String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model JobSeeker {
  id                   String           @id @default(cuid()) // Changed to CUID
  userId               String           @unique
  imageUrl             String
  dob                  DateTime?
  gender               String?
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  address              String?
  expectedSalary       Int              @default(0) // Default salary
  currency             String           @default("NRS") // Default currency
  salaryType           String           @default("above") // Default type
  salaryFrequency      String           @default("monthly") // Default frequency
  skills               String
  jobType              String           @default("Full Time") // Ensure one definition
  preferredJobLocation String?
  createdAt            DateTime         @default(now())
  job                  Job[]
  application          Application[]
  education            Education[]
  training             Training[]
  workExperience       WorkExperience[]
  notifications        Notification[]
  wishlist             Wishlist[]
}

model Education {
  id                String    @id @default(cuid())
  jobSeekerId       String
  degree            String
  courseProgram     String?
  board             String
  college           String?
  startDate         Int // Store as an integer (year)
  endDate           Int? // Store as an integer (year, nullable)
  currentlyStudying Boolean   @default(false) // To track if the user is currently studying
  jobSeeker         JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
}

model Training {
  id           String    @id @default(cuid())
  jobSeekerId  String
  trainingName String
  institute    String
  duration     Int
  year         Int
  jobSeeker    JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
}

model WorkExperience {
  id          String    @id @default(cuid())
  jobSeekerId String
  companyName String
  position    String
  jobLocation String
  startDate   Int
  endDate     Int
  description String?
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
}

model Employer {
  id              String           @id @default(cuid()) // Changed to CUID
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String           @unique
  industryType    IndustryType
  address         String
  companySize     String
  contactName     String
  phone           String
  aboutCompany    String
  imageUrl        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  job             Job[]
  employerPackage EmployerPackage?
  payments        Payment[] // One-to-many payments
}

model Admin {
  id       String  @id @default(cuid())
  email    String  @unique
  name     String?
  password String
}

model Job {
  id                  String         @id @default(cuid()) // Changed to CUID
  title               String
  categoryId          String
  category            JobCategory    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  description         String?
  createdAt           DateTime       @default(now())
  employer            Employer       @relation(fields: [employerId], references: [id], onDelete: Cascade)
  employerId          String
  applicationDeadline DateTime
  requirement         String
  jobLocation         String
  jobType             EmploymentType
  salary              String?
  experience          String?
  jobSeeker           JobSeeker[]
  application         Application[]
  wishlist            Wishlist[] // Add relation to Wishlist
}

model PricingPackage {
  id               String            @id @default(uuid())
  name             String            @unique
  price            Float
  jobLimit         Int
  duration         Int
  description      String?
  employerPackages EmployerPackage[] // Back-reference
  payments         Payment[] // üîÅ Add this line
}

model EmployerPackage {
  id         String         @id @default(uuid())
  employer   Employer       @relation(fields: [employerId], references: [id], onDelete: Cascade) // FIXED
  employerId String         @unique // Ensuring one-to-one mapping
  package    PricingPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId  String
  expiresAt  DateTime
  jobCount   Int            @default(0) // Tracks number of jobs posted under this package
  payments   Payment[] // üîÅ Back-reference added
}

model Payment {
  id                String           @id @default(uuid())
  employer          Employer         @relation(fields: [employerId], references: [id], onDelete: Cascade)
  employerId        String
  employerPackage   EmployerPackage? @relation(fields: [employerPackageId], references: [id], onDelete: SetNull)
  employerPackageId String?
  package           PricingPackage   @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId         String
  amount            Float
  method            String
  status            String
  transactionId     String           @unique
  createdAt         DateTime         @default(now())
}

model Application {
  id          String    @id @default(cuid()) // Changed to CUID
  jobSeekerId String
  jobId       String
  status      String
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  appliedAt   DateTime  @default(now())
}

model Wishlist {
  id          String    @id @default(cuid())
  userId      String
  jobSeekerId String // Track the JobSeeker who added the job to the wishlist
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
  jobId       String
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model Notification {
  id          String   @id @default(cuid())
  jobSeekerId String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  jobSeeker JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
}

enum Role {
  JOBSEEKER
  EMPLOYER
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
  TEMPORARY
}

enum IndustryType {
  IT_SOFTWARE
  FINANCE_BANKING
  HEALTHCARE
  EDUCATION
  MANUFACTURING
  RETAIL_ECOMMERCE
  HOSPITALITY_TOURISM
  FOOD_BEVERAGE
  CONSTRUCTION_ENGINEERING
}

model JobCategory {
  id   String @id @default(cuid())
  name String @unique
  jobs Job[]
}
