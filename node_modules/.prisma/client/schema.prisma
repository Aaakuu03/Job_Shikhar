generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String     @id @default(cuid()) // Changed to CUID
  name                     String?
  email                    String     @unique
  phoneNumber              String     @unique
  password                 String
  userType                 Role       @default(JOBSEEKER)
  isVerified               Boolean    @default(false)
  verificationToken        String?
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?
  isFormFilled             Boolean    @default(false)
  token                    Token[]
  employer                 Employer[]
  jobSeeker                JobSeeker?
}

model Token {
  id     String @id @default(cuid())
  token  String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model JobSeeker {
  id                   String           @id @default(cuid()) // Changed to CUID
  userId               String           @unique
  dob                  DateTime?
  gender               String?
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  address              String?
  expectedSalary       Int              @default(0) // Default salary
  currency             String           @default("NRS") // Default currency
  salaryType           String           @default("above") // Default type
  salaryFrequency      String           @default("monthly") // Default frequency
  skills               String
  jobType              String           @default("Full Time") // Ensure one definition
  preferredJobLocation String?
  createdAt            DateTime         @default(now())
  job                  Job[]
  application          Application[]
  education            Education[]
  training             Training[]
  workExperience       WorkExperience[]
}

model Education {
  id                String    @id @default(cuid())
  jobSeekerId       String
  degree            String
  courseProgram     String?
  board             String
  college           String?
<<<<<<< Updated upstream
  startDate         Int
  endDate           Int? // Optional field
=======
  startDate         Int // Store as an integer (year)
  endDate           Int? // Store as an integer (year, nullable)
>>>>>>> Stashed changes
  currentlyStudying Boolean   @default(false) // To track if the user is currently studying
  jobSeeker         JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
}

model Training {
  id           String    @id @default(cuid())
  jobSeekerId  String
  trainingName String
  institute    String
  duration     Int
  year         Int
  jobSeeker    JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
}

model WorkExperience {
  id          String    @id @default(cuid())
  jobSeekerId String
  companyName String
  position    String
<<<<<<< Updated upstream
  startDate   Int
  endDate     Int
  jobLocation String
=======
  jobLocation String
  startDate   Int
  endDate     Int
>>>>>>> Stashed changes
  description String?
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
}

model Employer {
  id           String   @id @default(cuid()) // Changed to CUID
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  industryType String
  address      String
  companySize  String
  contactName  String
  phone        String
<<<<<<< Updated upstream
  aboutCompany String? // Optional field
=======
  aboutCompany String
>>>>>>> Stashed changes
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  job          Job[]
}

model Admin {
  id       String  @id @default(cuid())
  email    String  @unique
  name     String?
  password String
}

model Job {
  id                  String        @id @default(cuid()) // Changed to CUID
  title               String
  category            String
  description         String
  createdAt           DateTime      @default(now())
  employer            Employer      @relation(fields: [employerId], references: [id], onDelete: Cascade)
  employerId          String
  applicationDeadline DateTime
  duration            String?
  requirement         String
  type                String
  jobType             String
  salary              String?
  experience          String?
  jobSeeker           JobSeeker[]
  application         Application[]
}

model Application {
  id          String    @id @default(cuid()) // Changed to CUID
  jobSeekerId String
  jobId       String
  status      String
  jobSeeker   JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

enum Role {
  JOBSEEKER
  EMPLOYER
}
